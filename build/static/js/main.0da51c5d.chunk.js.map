{"version":3,"sources":["App.jsx","serviceWorker.js","store/reducers/transiton.js","store/reducers/index.js","store/history.js","style/styleVarible.js","style/globalStyle.js","index.js"],"names":["App","react_default","a","createElement","this","props","children","Component","Boolean","window","location","hostname","match","INITIAL_STATE","trantiones","combineReducers","transiton","state","arguments","length","undefined","action","type","Object","objectSpread","payload","createHistory","styTM","white","white2","greyDark","greyDark2","greyDark3","primaryL","primaryM","primaryD","secondaryM","secondaryD","error","GlobalStyle","createGlobalStyle","_templateObject","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","react_redux_es","Router","history","src_App","Switch","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAiBeA,mLAZX,OACEC,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,gBAEGC,KAAKC,MAAMC,kBAPJC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8EChBAC,EAAgB,CACpBC,WAAW,MCAEC,cAAgB,CAC3BC,UDEW,WAAwC,IAA/BC,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvBL,EAAeQ,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrD,OAAQC,EAAOC,MACb,IAAK,UACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,WAAYO,EAAOI,UACxC,QACG,OAAOR,8CETCS,6BCFFC,EACH,CACFC,MAAM,OACNC,OAAO,WACPC,SAAS,UACTC,UAAU,UACVC,UAAU,UACVC,SAAS,OACTC,SAAS,OACTC,SAAS,OACTC,WAAW,OACXC,WAAW,OACXC,MAAM,0/BCRP,IAAMC,EAAcC,YAAHC,IAcPd,EAAYG,SAQDH,EAAYO,SACvBP,EAAYC,MAQOD,EAAYK,UAE1BL,EAAYI,UAcbJ,EAAYQ,UCpC3BO,EAAQC,YACVC,EAASC,YAAgBC,MAI7BC,IAASC,OACL/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAUP,MAAOA,GACbzC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAASC,QAASA,GACdlD,EAAAC,EAAAC,cAACiD,EAAD,KACAnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,MAIApD,EAAAC,EAAAC,cAACoC,EAAD,SAIVe,SAASC,eAAe,SNiGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0da51c5d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div >\n \n        <div >\n          ok\n          {this.props.children}       \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import { FLASH_MESSAGES ,Dialog,DialogColest} from '../actions/types';\n\nconst INITIAL_STATE = {\n  trantiones:'on',\n};\n\nexport default function(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case \"OPENING\":\n      return { ...state, trantiones: action.payload };\n    default:\n       return state;\n  }\n}","import { combineReducers } from 'redux';\nimport transiton from './transiton';\n\nexport default combineReducers({\n    transiton:transiton\n});","import createHistory from 'history/createBrowserHistory';\n\nexport default createHistory();","export const styTM ={\n    color:{\n        white:'#fff',\n        white2:'#d3d3d3;',\n        greyDark:'#737373', \n        greyDark2:'#8c8c8c',\n        greyDark3:'#a6a6a6',\n        primaryL:'#777',\n        primaryM:'#777',\n        primaryD:'#777', \n        secondaryM:'#777', \n        secondaryD:'#777',\n        error:'#777',\n    },\n    position:{\n        absCenterO:`\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);`,\n        \n    },\n    grid:{\n        width:'960px',\n        vertical:'80px',\n        verticalSmall: '60px',\n        gutterHorizontal:'60px'\n    }\n\n}","import { createGlobalStyle } from 'styled-components'\nimport { styTM } from './styleVarible'\n\n\nexport const GlobalStyle = createGlobalStyle`\n    *,\n    *::after,\n    *::before {\n        margin: 0;\n        padding: 0;\n        box-sizing: inherit;\n\n        text-decoration: none;\n\n        font-family: \"Lato\", sans-serif;\n        font-weight: 400;\n\n        line-height: 1.7;\n        color: ${styTM.color.greyDark};\n    }\n\n    body {\n        box-sizing: border-box;\n    }\n\n    ::selection {\n        background-color: ${styTM.color.primaryM};\n        color: ${styTM.color.white};\n    }\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n\n    ::-webkit-scrollbar-track {\n        box-shadow: inset 0 0 5px ${styTM.color.greyDark3}; \n        border-radius: 10px;\n        background: ${styTM.color.greyDark2}; \n    }\n\n    ::-webkit-scrollbar-thumb {\n        background-image:  linear-gradient(\n        to right bottom,\n        rgba( 168, 60, 60 , 0.8),\n        rgba( 211, 123, 123, 0.8)\n    );\n        border-radius: 5px;\n        transition: all .2s ease-out;\n    }\n\n    ::-webkit-scrollbar-thumb:hover {\n        background:${styTM.color.primaryD}; \n    }\n`","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducers from './store/reducers';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nimport { Router, Route, Switch } from 'react-router-dom';\nimport history from './store/history';\n\nimport { GlobalStyle } from './style/globalStyle'\n\nconst store = createStore(\n    reducers,applyMiddleware(reduxThunk)\n);\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router  history={history}>\n            <App>\n            <Switch>\n                {/* <Route path=\"/\" exact component={Home} />\n                <Route path=\"/landing\" component={LandingPage} /> */}\n            </Switch>\n            <GlobalStyle  />\n            </App>\n        </Router>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}